"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[332],{24214:e=>{e.exports=JSON.parse('{"functions":[{"name":"Init","desc":"Inits the CDC.\\n\\n```lua\\nCDC:Init():catch(warn)\\n```","params":[],"returns":[],"function_type":"method","source":{"line":47,"path":"src/CSCServer/init.lua"}},{"name":"CallClient","desc":"Calls a client that is given.\\n\\n```lua\\nCSC:CallClient(APlayerVar, \\"Hey This is a test name.\\", AArgumentVar, ASecondArgumentVar)\\n```","params":[{"name":"Player","desc":"","lua_type":"Player"},{"name":"EventName","desc":"","lua_type":"string"},{"name":"...","desc":"","lua_type":"Tuple"}],"returns":[],"function_type":"method","source":{"line":90,"path":"src/CSCServer/init.lua"}},{"name":"CallAllClients","desc":"Calls all clients that are available.\\n\\n```lua\\nCSC:CallAllClients(\\"Hey This is a test name.\\", AArgumentVar, ASecondArgumentVar)\\n```","params":[{"name":"EventName","desc":"","lua_type":"string"},{"name":"...","desc":"","lua_type":"Tuple"}],"returns":[],"function_type":"method","source":{"line":105,"path":"src/CSCServer/init.lua"}},{"name":"CallClientsInTable","desc":"Calls clients in a table.\\n\\n```lua\\nlocal TableOfPlayers = {\\n    APlayerVar,\\n    SecondPlayerVar\\n}\\nCSC:CallClientsInTable(TableOfPlayers, \\"Hey This is a test name.\\", AArgumentVar, ASecondArgumentVar) -- You can add as much arguments as you want.\\n```","params":[{"name":"Players","desc":"","lua_type":"table"},{"name":"EventName","desc":"","lua_type":"string"},{"name":"...","desc":"","lua_type":"Tuple"}],"returns":[],"function_type":"method","since":"v1.1.0","source":{"line":124,"path":"src/CSCServer/init.lua"}},{"name":"DelayCallClient","desc":"Calls specified client after a certain amount of time.","params":[{"name":"Delay","desc":"","lua_type":"Seconds"},{"name":"Player","desc":"","lua_type":"Player"},{"name":"EventName","desc":"","lua_type":"string"},{"name":"...","desc":"","lua_type":"Tuple"}],"returns":[],"function_type":"method","since":"1.2.0","yields":true,"source":{"line":138,"path":"src/CSCServer/init.lua"}},{"name":"AddCallback","desc":"Adds a callback to be executed when server is invoked.\\n\\n```lua\\nlocal Callback = function(Player, ArgumentOne, ArgumentTwo)\\n    -- Code\\nend\\nCSC:AddCallback(\\"This is a event name.\\",Callback)\\n```","params":[{"name":"EventName","desc":"","lua_type":"string"},{"name":"Callback","desc":"","lua_type":"(Player:Player, ...any) -> any"}],"returns":[],"function_type":"method","tags":["Experimental"],"since":"1.2.0","source":{"line":156,"path":"src/CSCServer/init.lua"}},{"name":"InvokeClient","desc":"Invokes the client and executes all callbacks added to it.\\n\\n```lua\\nCSC:InvokeServer(Player, \\"This is a Event Name\\", ArgumentOne, ArgumentTwo)\\n```","params":[{"name":"Player","desc":"","lua_type":"Player"},{"name":"EventName","desc":"","lua_type":"string"},{"name":"...","desc":"","lua_type":"Tuple"}],"returns":[{"desc":"","lua_type":"any"}],"function_type":"method","tags":["Experimental"],"since":"1.2.0","yields":true,"source":{"line":173,"path":"src/CSCServer/init.lua"}}],"properties":[{"name":"ServerCalled","desc":"A signal that fires when server is called.\\n```lua\\nCSC.ServerCalled:Connect(Player, EventName, ArgumentOne, ArgumentTwo)\\n```\\n        ","lua_type":"RBXScriptSignal","source":{"line":75,"path":"src/CSCServer/init.lua"}}],"types":[{"name":"Seconds","desc":"","lua_type":"number","source":{"line":13,"path":"src/CSCServer/init.lua"}}],"name":"CSCServer","desc":"The Server Side of CSC","realm":["Server"],"source":{"line":21,"path":"src/CSCServer/init.lua"}}')}}]);