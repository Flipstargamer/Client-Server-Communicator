[{"title":"CSCServer","type":0,"sectionRef":"#","url":"/Client-Server-Communicator/api/CSCServer","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"CSCServer","url":"/Client-Server-Communicator/api/CSCServer#properties","content":" "},{"title":"ServerCalled​","type":1,"pageTitle":"CSCServer","url":"/Client-Server-Communicator/api/CSCServer#ServerCalled","content":"&lt;/&gt; CSCServer.ServerCalled: RBXScriptSignal  A signal that fires when server is called. CSC.ServerCalled:Connect(Player, EventName, ArgumentOne, ArgumentTwo)  "},{"title":"Functions​","type":1,"pageTitle":"CSCServer","url":"/Client-Server-Communicator/api/CSCServer#functions","content":" "},{"title":"Init​","type":1,"pageTitle":"CSCServer","url":"/Client-Server-Communicator/api/CSCServer#Init","content":"&lt;/&gt; CSCServer:Init() → () Inits the CDC. CDC:Init():catch(warn)   "},{"title":"CallClient​","type":1,"pageTitle":"CSCServer","url":"/Client-Server-Communicator/api/CSCServer#CallClient","content":"&lt;/&gt; CSCServer:CallClient( Player: Player , EventName: string, ...: Tuple ) → () Calls a client that is given. CSC:CallClient(APlayerVar, &quot;Hey This is a test name.&quot;, AArgumentVar, ASecondArgumentVar)   "},{"title":"CallAllClients​","type":1,"pageTitle":"CSCServer","url":"/Client-Server-Communicator/api/CSCServer#CallAllClients","content":"&lt;/&gt; CSCServer:CallAllClients( EventName: string, ...: Tuple ) → () Calls all clients that are available. CSC:CallAllClients(&quot;Hey This is a test name.&quot;, AArgumentVar, ASecondArgumentVar)   "},{"title":"CallClientsInTable​","type":1,"pageTitle":"CSCServer","url":"/Client-Server-Communicator/api/CSCServer#CallClientsInTable","content":"since v1.1.0 &lt;/&gt; CSCServer:CallClientsInTable( Players: table, EventName: string, ...: Tuple ) → () Calls clients in a table. local TableOfPlayers = { APlayerVar, SecondPlayerVar } CSC:CallClientsInTable(TableOfPlayers, &quot;Hey This is a test name.&quot;, AArgumentVar, ASecondArgumentVar) -- You can add as much arguments as you want.   "},{"title":"DelayCallClient​","type":1,"pageTitle":"CSCServer","url":"/Client-Server-Communicator/api/CSCServer#DelayCallClient","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields since 1.2.0 &lt;/&gt; CSCServer:DelayCallClient( Delay: Seconds, Player: Player , EventName: string, ...: Tuple ) → () "},{"title":"Types","type":1,"pageTitle":"CSCServer","url":"/Client-Server-Communicator/api/CSCServer##","content":""},{"title":"​","type":1,"pageTitle":"CSCServer","url":"/Client-Server-Communicator/api/CSCServer#Seconds","content":"type Seconds = number  Calls specified client after a certain amount of time.  "},{"title":"AddCallback​","type":1,"pageTitle":"CSCServer","url":"/Client-Server-Communicator/api/CSCServer#AddCallback","content":"Experimental since 1.2.0 &lt;/&gt; CSCServer:AddCallback( EventName: string, Callback: ( Player:Player, ...any ) → any ) → () Adds a callback to be executed when server is invoked. local Callback = function(Player, ArgumentOne, ArgumentTwo) -- Code end CSC:AddCallback(&quot;This is a event name.&quot;,Callback)   "},{"title":"InvokeClient​","type":1,"pageTitle":"CSCServer","url":"/Client-Server-Communicator/api/CSCServer#InvokeClient","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Experimental since 1.2.0 &lt;/&gt; CSCServer:InvokeClient( Player: Player , EventName: string, ...: Tuple ) → any Invokes the client and executes all callbacks added to it. CSC:InvokeServer(Player, &quot;This is a Event Name&quot;, ArgumentOne, ArgumentTwo)  "},{"title":"Introduction","type":0,"sectionRef":"#","url":"/Client-Server-Communicator/docs/intro","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Introduction","url":"/Client-Server-Communicator/docs/intro#installation","content":"Download module and put it in Replicated Storage. "},{"title":"Getting the Client/Server Module​","type":1,"pageTitle":"Introduction","url":"/Client-Server-Communicator/docs/intro#getting-the-clientserver-module","content":"CSC is build that you can require the main module which will return the client or server depending on what script was used to require it. Example: local CSC = require(workspace:WaitForChild(CSC))  "},{"title":"CSCClient","type":0,"sectionRef":"#","url":"/Client-Server-Communicator/api/CSCClient","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"CSCClient","url":"/Client-Server-Communicator/api/CSCClient#properties","content":" "},{"title":"ClientCalled​","type":1,"pageTitle":"CSCClient","url":"/Client-Server-Communicator/api/CSCClient#ClientCalled","content":"&lt;/&gt; CSCClient.ClientCalled: RBXScriptSignal  A signal that fires when client is called. CSC.ClientCalled:Connect(EventName, ArgumentOne, ArgumentTwo)  "},{"title":"Functions​","type":1,"pageTitle":"CSCClient","url":"/Client-Server-Communicator/api/CSCClient#functions","content":" "},{"title":"CallServer​","type":1,"pageTitle":"CSCClient","url":"/Client-Server-Communicator/api/CSCClient#CallServer","content":"&lt;/&gt; CSCClient:CallServer( EventName: string, ...: Tuple ) → () Calls the server. CDC:CallServer(&quot;Hey This is a test name.&quot;, AArgumentVar, ASecondArgumentVar)   "},{"title":"DelayCallServer​","type":1,"pageTitle":"CSCClient","url":"/Client-Server-Communicator/api/CSCClient#DelayCallServer","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields since 1.2.0 &lt;/&gt; CSCClient:DelayCallServer( Delay: Seconds, EventName: string, ...: Tuple ) → () "},{"title":"Types","type":1,"pageTitle":"CSCClient","url":"/Client-Server-Communicator/api/CSCClient##","content":""},{"title":"​","type":1,"pageTitle":"CSCClient","url":"/Client-Server-Communicator/api/CSCClient#Seconds","content":"type Seconds = number  Calls the server after a certain amount of time.  "},{"title":"AddCallback​","type":1,"pageTitle":"CSCClient","url":"/Client-Server-Communicator/api/CSCClient#AddCallback","content":"Experimental since 1.2.0 &lt;/&gt; CSCClient:AddCallback( EventName: string, Callback: (...any) → any ) → () Adds a callback to be executed when client is invoked. local Callback = function(ArgumentOne, ArgumentTwo) -- Code end CSC:AddCallback(&quot;This is a event name.&quot;,Callback)   "},{"title":"InvokeServer​","type":1,"pageTitle":"CSCClient","url":"/Client-Server-Communicator/api/CSCClient#InvokeServer","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Experimental since 1.2.0 &lt;/&gt; CSCClient:InvokeServer( EventName: string, ...: Tuple ) → any Invokes the server and executes all callbacks added to it. CSC:InvokeServer(&quot;This is a Event Name&quot;, ArgumentOne, ArgumentTwo)  "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/Client-Server-Communicator/docs/Starting","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Getting Started","url":"/Client-Server-Communicator/docs/Starting#installation","content":""},{"title":"Roblox Studio​","type":1,"pageTitle":"Getting Started","url":"/Client-Server-Communicator/docs/Starting#roblox-studio","content":"To install CSC in Roblox Studio just get the file put it in replicated storage. Require/Init​ To require use this simple script: -- Server-Sided local CSC = require(game:GetService(&quot;ReplicatedStorage&quot;).CSC) -- If you changed the name of CSC change CSC to the new name. CSC:Init() -- This is IMPORTANT don't forget it.  "},{"title":"Wally​","type":1,"pageTitle":"Getting Started","url":"/Client-Server-Communicator/docs/Starting#wally","content":"Add this to your dependencies list: CSC = &quot;flipstargamer/clsecom@1.1.1&quot; -- May be outdated version  "},{"title":"Learing the Module​","type":1,"pageTitle":"Getting Started","url":"/Client-Server-Communicator/docs/Starting#learing-the-module","content":"Lets setup the communication part, but what are we going to do? Well let's make a simple thing that when the player presses B then we call the server to print something. TODO "}]